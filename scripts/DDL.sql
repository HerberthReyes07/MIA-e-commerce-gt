-- =====================================================
-- E-COMMERCE GT - DATABASE SCHEMA
-- Compatible con Spring Boot + Hibernate
-- =====================================================

-- Borrar la BD si ya existe
DROP DATABASE IF EXISTS ecommerce_db;

-- Crear base de datos
CREATE DATABASE ecommerce_db;

-- Usar la base de datos
\c ecommerce_db;

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;
SET default_tablespace = '';
SET default_table_access_method = heap;

-- =====================================================
-- 1. CREAR TABLAS (sin foreign keys)
-- =====================================================

-- Tabla: user_roles
CREATE TABLE public.user_roles (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
    ),
    description text,
    name character varying(50) NOT NULL,
    CONSTRAINT user_roles_pkey PRIMARY KEY (id),
    CONSTRAINT uk182xa1gitcxqhaq6nn3n2kmo3 UNIQUE (name)
);

-- Tabla: users
CREATE TABLE public.users (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
    ),
    address character varying(255),
    email character varying(150) NOT NULL,
    first_name character varying(100) NOT NULL,
    last_name character varying(100) NOT NULL,
    password character varying(255) NOT NULL,
    phone character varying(15) NOT NULL,
    registration_date date,
    role_id bigint NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT uk6dotkott2kjsp8vw4d0m25fb7 UNIQUE (email)
);

-- Tabla: categories
CREATE TABLE public.categories (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
    ),
    description text,
    name character varying(100) NOT NULL,
    CONSTRAINT categories_pkey PRIMARY KEY (id),
    CONSTRAINT ukt8o6pivur7nn124jehx7cygw5 UNIQUE (name)
);

-- Tabla: products
CREATE TABLE public.products (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
    ),
    creation_date date,
    description text NOT NULL,
    image_url character varying(255),
    is_new boolean NOT NULL,
    last_updated_date date,
    name character varying(100) NOT NULL,
    price double precision NOT NULL,
    review_status integer NOT NULL,
    stock integer NOT NULL,
    owner_id bigint NOT NULL,
    CONSTRAINT products_pkey PRIMARY KEY (id)
);

-- Tabla: product_categories (tabla intermediaMany-to-Many)
CREATE TABLE public.product_categories (
    product_id bigint NOT NULL,
    category_id bigint NOT NULL
);

-- Tabla: product_moderation_requests
CREATE TABLE public.product_moderation_requests (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
    ),
    rejection_reason text,
    request_date date NOT NULL,
    review_date date,
    status integer NOT NULL,
    moderator_id bigint NOT NULL,
    product_id bigint NOT NULL,
    CONSTRAINT product_moderation_requests_pkey PRIMARY KEY (id)
);

-- Tabla: carts
CREATE TABLE public.carts (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
    ),
    creation_date date NOT NULL,
    is_active boolean NOT NULL,
    customer_id bigint NOT NULL,
    CONSTRAINT carts_pkey PRIMARY KEY (id)
);

-- Tabla: cart_items
CREATE TABLE public.cart_items (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
    ),
    quantity integer NOT NULL,
    cart_id bigint NOT NULL,
    product_id bigint NOT NULL,
    CONSTRAINT cart_items_pkey PRIMARY KEY (id)
);

-- Tabla: orders
CREATE TABLE public.orders (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
    ),
    delivery_date date NOT NULL,
    order_date date NOT NULL,
    status integer NOT NULL,
    total_amount double precision NOT NULL,
    buyer_id bigint NOT NULL,
    CONSTRAINT orders_pkey PRIMARY KEY (id)
);

-- Tabla: order_details
CREATE TABLE public.order_details (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
    ),
    platform_fee double precision NOT NULL,
    quantity integer NOT NULL,
    seller_earnings double precision NOT NULL,
    subtotal double precision NOT NULL,
    order_id bigint NOT NULL,
    product_id bigint NOT NULL,
    CONSTRAINT order_details_pkey PRIMARY KEY (id)
);

-- Tabla: credit_cards
CREATE TABLE public.credit_cards (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY (
        START WITH 1 INCREMENT BY 1 NO MINVALUE NO MAXVALUE CACHE 1
    ),
    alias character varying(50),
    card_holder character varying(255) NOT NULL,
    card_number character varying(16) NOT NULL,
    cvv character varying(4) NOT NULL,
    expiration_date character varying(5) NOT NULL,
    customer_id bigint NOT NULL,
    CONSTRAINT credit_cards_pkey PRIMARY KEY (id)
);

-- =====================================================
-- 2. AGREGAR FOREIGN KEYS (en el orden correcto)
-- =====================================================

-- FK: users -> user_roles
ALTER TABLE ONLY public.users
    ADD CONSTRAINT fkh555fyoyldpyaltlb7jva35j2 
    FOREIGN KEY (role_id) REFERENCES public.user_roles(id);

-- FK: products -> users (owner)
ALTER TABLE ONLY public.products
    ADD CONSTRAINT fkmodgy1j6kai83i3mweyp731qc 
    FOREIGN KEY (owner_id) REFERENCES public.users(id);

-- FK: product_categories -> products
ALTER TABLE ONLY public.product_categories
    ADD CONSTRAINT fklda9rad6s180ha3dl1ncsp8n7 
    FOREIGN KEY (product_id) REFERENCES public.products(id);

-- FK: product_categories -> categories
ALTER TABLE ONLY public.product_categories
    ADD CONSTRAINT fkd112rx0alycddsms029iifrih 
    FOREIGN KEY (category_id) REFERENCES public.categories(id);

-- FK: product_moderation_requests -> users (moderator)
ALTER TABLE ONLY public.product_moderation_requests
    ADD CONSTRAINT fk582q3017sv5rg022h8jbmusje 
    FOREIGN KEY (moderator_id) REFERENCES public.users(id);

-- FK: product_moderation_requests -> products
ALTER TABLE ONLY public.product_moderation_requests
    ADD CONSTRAINT fkiv5jr84bq18qft7lubawnqma0 
    FOREIGN KEY (product_id) REFERENCES public.products(id);

-- FK: carts -> users (customer)
ALTER TABLE ONLY public.carts
    ADD CONSTRAINT fk99i1rh5nm7r3f1b3wdcuq5h57 
    FOREIGN KEY (customer_id) REFERENCES public.users(id);

-- FK: cart_items -> carts
ALTER TABLE ONLY public.cart_items
    ADD CONSTRAINT fkpcttvuq4mxppo8sxggjtn5i2c 
    FOREIGN KEY (cart_id) REFERENCES public.carts(id);

-- FK: cart_items -> products
ALTER TABLE ONLY public.cart_items
    ADD CONSTRAINT fk1re40cjegsfvw58xrkdp6bac6 
    FOREIGN KEY (product_id) REFERENCES public.products(id);

-- FK: orders -> users (buyer)
ALTER TABLE ONLY public.orders
    ADD CONSTRAINT fkhtx3insd5ge6w486omk4fnk54 
    FOREIGN KEY (buyer_id) REFERENCES public.users(id);

-- FK: order_details -> orders
ALTER TABLE ONLY public.order_details
    ADD CONSTRAINT fkjyu2qbqt8gnvno9oe9j2s2ldk 
    FOREIGN KEY (order_id) REFERENCES public.orders(id);

-- FK: order_details -> products
ALTER TABLE ONLY public.order_details
    ADD CONSTRAINT fk4q98utpd73imf4yhttm3w0eax 
    FOREIGN KEY (product_id) REFERENCES public.products(id);

-- FK: credit_cards -> users (customer)
ALTER TABLE ONLY public.credit_cards
    ADD CONSTRAINT fk5vfied8g30jc3xslmakv9vpy 
    FOREIGN KEY (customer_id) REFERENCES public.users(id);

-- =====================================================
-- 3. SET OWNERSHIP (opcional, ajusta seg√∫n tu usuario)
-- =====================================================

ALTER TABLE public.cart_items OWNER TO postgres;
ALTER TABLE public.carts OWNER TO postgres;
ALTER TABLE public.categories OWNER TO postgres;
ALTER TABLE public.credit_cards OWNER TO postgres;
ALTER TABLE public.order_details OWNER TO postgres;
ALTER TABLE public.orders OWNER TO postgres;
ALTER TABLE public.product_categories OWNER TO postgres;
ALTER TABLE public.product_moderation_requests OWNER TO postgres;
ALTER TABLE public.products OWNER TO postgres;
ALTER TABLE public.user_roles OWNER TO postgres;
ALTER TABLE public.users OWNER TO postgres;

-- =====================================================
-- FIN DEL SCRIPT
-- =====================================================
